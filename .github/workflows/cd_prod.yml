name: Backend Prod CI/CD

on:
  pull_request:
    branches: [ "prod" ]
  push:
    branches: [ "prod" ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/udt-prod:latest

jobs:
  ############################################################
  # PR 단계 : Build & Test만 수행 (CI 전용)
  ############################################################
  test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      TZ: 'Asia/Seoul'

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate application.yml files
        run: |
          mkdir -p ./src/main/resources ./src/test/resources
          echo "${{ secrets.APPLICATION_PROD }}" > ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_TEST }}" > ./src/test/resources/application.yml

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build and Test
        run: ./gradlew clean build

  ############################################################
  # Push 단계 : Docker build + Deploy 수행
  ############################################################
  build-and-deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      TZ: 'Asia/Seoul'

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate application.yml files
        run: |
          mkdir -p ./src/main/resources ./src/test/resources
          echo "${{ secrets.APPLICATION_PROD }}" > ./src/main/resources/application.yml
          echo "${{ secrets.APPLICATION_TEST }}" > ./src/test/resources/application.yml

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Build Docker image
        run: docker build . -f Dockerfile -t $IMAGE_NAME

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push Docker image
        run: docker push $IMAGE_NAME

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ${{ secrets.EC2_USERNAME_PROD }}
          key: ${{ secrets.EC2_KEY_PROD }}
          port: 22

          proxy_host: ${{ secrets.BASTION_HOST }}
          proxy_username: ${{ secrets.BASTION_USER }}
          proxy_key: ${{ secrets.BASTION_KEY }}

          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}
            docker stop udt_prod_server || true
            docker rm udt_prod_server || true
            cd ~/udt
            docker pull ${{ secrets.DOCKER_USERNAME }}/udt-prod:latest
            docker-compose pull
            docker-compose up -d --force-recreate